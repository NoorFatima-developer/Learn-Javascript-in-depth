01: //Variables in JS:

var(redeclared) , let(redeclared), const(cannot redeclared)


02: //Boolean (true, false)

flasy values include:

-> false
-> null (set by programmers)
-> undefined (set by JS compiler)
-> 0
-> -0
-> NAN
-> '', "", ``, (empty quotes)

//truthy values include:

like string, [], {}, etc...

03: //Comparison Operators(==, ===)

i-> Relational Operators:

  - >Greater than
  - < Less than
  - >= Greater than or equal to
  - <= Less than or equal to

  Example of Relational Operators:

    console.log(10 > 10);   //false
    console.log(10 < 10);   //false
    console.log(10 >= 10);  //true
    console.log(10 <= 10);  //true

ii-> Equality Operators

    == lose equality Operator(check value)
    !== lose non-equality Operator(value)
    === strict equality Operators(type + value)
    !=== strict non-equality Operators( type + value)
     

Example:
console.log(10 == 10)     //true
console.log(10 == '10')    //true(becaue it check value not data type whether it is string or anything else)


console.log(10 === 10)    //true
console.log(10 === "10")  //false(because it checks type and value and 10 num is not equal to 10 string so false)

04: // Strings

(a) let firstname = "Noor";
let secondname = "Webdev";

let fullname = firstname + secondname;    
console.log(fullname)         //Noorebdev

(b) let firstname = "Noor ";
let secondname = "Webdev";

let fullname = firstname + secondname;    
console.log(fullname)         //Noor webdev


(b) let firstname = "Noor ";
let secondname = "Webdev";

let fullname = firstname + " " + secondname; 
console.log(fullname)         //Noor webdev

i----- Concatenation Strings

let firstname = "Noor";
let secondname = "Webdev";

let fullname = firstname.concat(secondname);    
console.log(fullname)         //Noorwebdev

ii----- Append Strings

let firstname = "Noor";
let secondname = "Webdev";

firstname += " youtuber:"; 
console.log(firstaname)         //Noor youtuber


iii----- Length Strings

let firstname = "Noor";
let secondname = "Webdev";

console.log(firstname.length)         //4

iv------ Cases in Strings

let firstname = "Noor";
let secondname = "Webdev";

console.log(firstname.toLowerCase())         //noor
console.log(firstname.toUpperCase())         //NOOR

v------ Slice


let firstname = "Noor";               // 0 = N, 1 = o, 2 = o, 3 = r
let secondname = "Webdev";

console.log(firstname.slice(0, 2)) ;    //No
console.log(secondname.slice(1, 4));      //ebd


vi----- Split and Join Method in Strings

let firstname = "Noor";
let secondname = "Webdev";

console.log(firstname.split(""));   //(4) ['N', 'o', 'o', 'r'] (in array)
console.log(firstname.split(" "));  //['Noor']    (in string)
console.log(firstname.split(" ").join("")); //Noor


vii----- Include in Strings

let firstname = "Noor";
let secondname = "Webdev";

//includes return ans in true or false
console.log(firstname.includes("N"));   //true
console.log(firstname.includes("w"));   //false

viii----- Trim Method in Strings

let firstname = "   Noor    ";
let secondname = "Webdev";

//Trim Remove whitespaces 
console.log(firstname.trim());   //Noor

NOTE:

Let say, I want to print firstname but also i add something with it in ""; but its not possible and give me error...
like this;

let firstname = "Noor";
let secondname = "Webdev";

let fullname = "firstname something yeah!
yeah yeah yeah oh yeah!;"

console.log(fullname);   //Error


----Solution:----

....Backtick usage and benefit....:

let firstname = "Noor";
let secondname = "Webdev";

let fullname = `firstname something yeah!
yeah yeah yeah oh yeah!`;

console.log(fullname);   //firstname something yeah yeah yeah yeah oh yeah!


And its better way if I also want to print firstname value as well;

let firstname = "Noor";
let secondname = "Webdev";

let fullname = `${firstname} ${secondname} something yeah!
yeah yeah yeah oh yeah!`;

console.log(fullname);   //Noor Webdev something yeah!


05:  // Type Conversion in Javascript:

i-------------Convert string into number

let money = "50";
console.log(typeof money);    //string

//As type is string and now I want to convert it into number so i can take any step of any three steps:

money = parseInt(money);     // number
money = +money;              // number

// I can also do this by using constructor:

money = Number(money);       //number
console.log(typeof money);   //number


ii-------------Convert number into string

let money = 50
console.log(typeof money);

//As type is number and now i want to convert it into string so i can do it by two ways:

//-- money = String(money);
//-- money = money.toString(money)
console.log(typeof money);



iii----------Convert String to decimal:


let money = "50.234"
console.log(money);
console.log(typeof money);

//As type is string and now i want to convert it into decimal so i can do it by two ways:

//-- money = String(money);
//-- money = parseFloat(money);
console.log(money);
console.log(typeof money);

06: // Conditional Statements in js:

let password;

// if (password === 8){
//     console.log("Welcome");
// }

// else if(password <= 8){
//     console.log("Password is too short");
// }

// else if(password >= 8){
//     console.log("Too long password");
//     console.log("Password should be 8 characters");
// }

// else {
//     console.log("Please provide a password");
// }

07: //Switch Cases in js:

-------syntax:-----

//switch (expression) {
    //case x:
      //print
      //break;
    //case y:
      //print
      //break;

// }

Example:

let x = 1;
let bulb;

switch (x) {
    case 0:
        bulb = "off";
        console.log(bulb);
        break;
    case 1:
        bulb = "on";
        console.log(bulb);  //output = on
        break;
    default:
        bulb = "no value found";
        console.log(bulb);
}

08: Loop:-

//i--- For loop:

===> DRY = Don't repeat yourself...

Syntax:

// for( initialExpression; condition; incrementExpression) {

}

for (let i = 1; i <= 10; i++)
 {
  console.log( "----Outer loop----");
 }

 // nested loop

 for(let j = 1; j <= 5; j++) {
  console.log("---Inner Loop---");
 }

 ii--- While loop:

 syntax:

 //Variable declare outside(like let i = 10;)
 // while (condition) {

    // code block to be executed
 }

Example:

let i = 1;

while(i <= 10) {

  console.log("Hello Noor", i);
  i++;
}

ii--- Do while loop:

//Variable declare outside (like let i = 5;)

// do {
  //console.log("Hello world");
  i++;

} while (condition);


09: //Logical Operators in js:

1. ---> Logical AND (&&)
// -> True if both of the operands/boolean values are true, else evaluates False.
 
Example: 


i---const a = true;
    const b = true;
    console.log(a && b);  //true(because both of the operands are true)

ii---const c = 4;
     console.log(c > 2 && c < 2);  // false(because one cond true and one false)


2. ---> Logical OR (||)
// -> True if either(one must be true) of the operands/boolean values is true.
and evaluates to false if both are false.

Example:

const a = true;
const b = false;
const c = 4;

console.log(a || b); //true(because one is true)


3. ---> Logical NOT (!)
// -> True if the operands is false and false if operand is true...

Example:

const a = true;
const b = true;
const c = 4;

console.log(!a);
console.log(!b);

10: // Arrays --> 0 index based

1-Dimension Array:

---NumberArray:----
const numbersArray = [1, 2, 3, 5, 7];
console.log(numbersArray);

---StringArray:----
const stringsArray = ["eat", "sleep", "weep", "reap"];
console.log(stringsArray);

//Accessing elements from array

console.log(stringsArray[0]);
console.log(stringsArray[1]);
console.log(stringsArray[2]);
console.log(stringsArray[3]);

// Nested Array or 2 Dimention Array:

const nestArr = ["one", ["two", "three"], 1, true, false];
console.log(nestArr[1][0]);  //two
console.log(nestArr[1][1]);  //three


Methods of Array:

`concat()` | Joins two or more arrays and returns a result.
`includes()` | Checks if an array contains a specified element.
`push()` | Adds a new element to the end of an array and returns the new length of the array.
`unshift()` | Adds a new element to the beginning of an array and returns the new length of the array.
`pop()` | Removes the last element of an array and returns the removed element.
`shift()` | Removes the first element of an array and returns the removed element.
`sort()` | Sorts the elements alphabetically in strings and in ascending order.
`slice()` | Selects a part of an array and returns the new array.
`splice()` | Removes or replaces existing elements and/or adds new elements.

------Example of All Array Methods:-----

let favsingers = ["atif", "hira", "qubra"];

console.log(favsingers);
console.log(favsingers.length);

//Push Method:
favsingers.push("alia");  //add new element at end of array
console.log(favsingers);
console.log(favsingers.length);
//Pop
favsingers.pop();       //remove last element from array
console.log(favsingers);
console.log(favsingers.length);
//shift
favsingers.shift();     //remove first element from array
console.log(favsingers);   
//unshift
favsingers.unshift("noor");   //add new element at start
console.log(favsingers); 
//concat
const fruits = ["apples", "oranges", "bananas"];
const morefruits = ["strawberries", "pineapples", "grapefruits"];
const totalfruits = fruits.concat(morefruits);
console.log(totalfruits);
//includes
const pl = ["javascript", "Golang", "Python", "Php"];
console.log(pl.includes("Golang")); //true return
//join
const pl2 = ["javascript", "Golang", "Python", "Php"];
console.log(pl2.join("-"));
//reverse
const pl3 = ["javascript", "Golang", "Python", "Php"];
console.log(pl.reverse());
//slice
const pl4 = ["javascript", "Golang", "Python", "Php"];
console.log(pl4.slice(0, 2));
//sort
const numbers = [1,4,5,8,0];
console.log(numbers);
console.log(numbers.sort());

11. //OBJECTS --> (stores collection of data)

--->const val = {label : key}

Example:

const person = {

 firstname: "noor",
 lastname: "fatima",
 age: 19,
 location: ['Planet', "Earth"],
 isProgrammer : true,   
 sum : function(a, b){
  return a + b,         //there will be function value as well...
 }
};
console.log(person);

console.log(person.firstname);
console.log(person["firstname"]);
console.log(person.lastname);
console.log(person.age);
console.log(person.location);
console.log(person.isProgrammer);

// ----------define object by two ways---------//

const person1 = {firstname: "Noor",};
person1.lastname = "Fatima";
person1.location = ["Lahore, Earth"];

//delete method in objects:
delete person1.firstname;

console.log(person1);
const person2 = {firstname: "Noor", lastname:"Fatima", location:["Lahore, Earth"]};
console.log(person2);


//-----------get objects by two ways-----------//

//i--- console.log(person1.firstname);
//ii--- console.log(person1["firstname"]);
// const arr = [];
// console.log(typeof arr); //object

12. // Functions:

//A function is a block of code that performs a specific task.
//Functions are heart of js.
//Functions makes the code resuable. You can declare it once and use it multiple times.
//Functions make the program easier as each small task is divided into a function.
//Function makes readability
// DRY- Don't Repeat yourself
// function name (parameterifany){...}
//call, run, exucute (all of these are same but without that we cannot run a function)


//--------Function declaration is:-------

function sayhello(username) {
  console.log(`Hello ${username}`);
}
sayhello("Noor");

//----------Function expression is:----------

const greetings = function(username){
  console.log(`Hello ${username}`);
}
greetings("Noor");

-----------------NOTE-------------------

//--------Function declaration is:-------

sayhello("Noor");                //call the function at top in declaratiom
function sayhello(username) {
    console.log(`Hello ${username}`);
  }
  
  //----------Function expression is:----------

greetings("Zain");            //cannot call the function at top in expression(reference error that you could't accessed the variable before initialization)
 const greetings = function(username){
    console.log(`Hello ${username}`);
  }


Examples:
//Function declaration:

function greet(){
    console.log("Hello from a function");
}
greet();

//Function pass by parameter and argument...

function sayhello(name) {
    console.log(`Hello ${name}`);
}
sayhello("noor");

// return ---> function

function add(x, y) {
    return x + y;
}

console.log(add(20, 10));

//OR
const res = (add(20, 10));

console.log(res);

ALSO;;;;;;

function add(x, y) {    //creating the function
    return x + y;       //returning the function
}

const res1 = (add(20, 10)); //res1 variable stores the value of add function
const res2 = (add(20, 10));
const res3 = (add(20, 10));

console.log(res1);          //calling the function
console.log(res2);
console.log(res3);


13. //Callback functions in js:

When we provide a function as an argument to another function then that function called as callback function:

Syntax---

showcallfunc(funcrion(){});

Example 01:

function showfunc(fn){
  const value = 10;
  fn(value)
}

showfunc (function(value){
  console.log(value)
})


Example 02:

function greet(name, cb){
    console.log(`Hello ${name}`);
    cb()
}

// I will put this function from here and pass it to another function where i pased their reference but at example 03

/*function cb(){
    console.log(`I am a callback function`);
}*/

greet("alizain", cb);   

Example 03:

function greet(name, cb){
    console.log(`Hello ${name}`);
    cb()
}

greet("Zain", function cb(){
    console.log(`Hello I am a callback function`);
});


14. //Scope in Javascript(basically it is that where we can access the variables or where we cannot acces the variables...)

Scope in js refers to the current context of code, which determines the accessibility of variables to js.

There are ywo types of scope in js:
-->Global variables are those declared outside of a block.
-->Local scope variables are those declared inside of a block.

Example:

for (let i = 0; i < 5; i++) {
    console.log(i);     //Local variables
    
    
}

console.log(i);         //Global variables


//NOTE:
//Global variables can access anywhere even in the local scope but local variables which are defined inside the function cannot access outside or global scope..

15. //Method in js:

Methods are nothing its just a function inside an object...
And one more thing is that we can create a function separately and then pass their reference in object and if we dont want to pass this function inside object then we can directly create a function in object as well by using the object pattern..

//Example 01:

function greet(){

    return `Hello, my name is ${person.name} & ${person.age} years old.`
}

const person = {
    name : "Noor",
    age : 30,
    greet,          //passing their reference here(i can also make function instead of passing refere here at example 02)
}

console.log(person.greet());


//Example 02:

//I can also do it by:

const person1 = {
    name : "Noor",
    age : 30,
    greet : function (){

        return `Hello, my name is ${person.name} & ${person.age} years old.`
    }
    };

    console.log(person1.greet());

16. //JSON in js:(javascript object notation and it is nothing more like data interchange format that is easier to understand by humans and also for machine to parse and generate. data between server and applications and those stuff like that...)

syntax like:

{
  "name" : "noor"
}

//Also we create a separate file for json in js...
//Must write code in double quotes as we are working with JSON Property..



const person = {
    "name" : "Ali Zain",
    "age" : 20,
    "email" : "alizainzahid123@gmail.com",
    "isSubscrbed" : true,
    "hobbies" : ["Loving", "Playing but with girls", "Sleeping", "Quarelleing", "hurting" , "kissing", "hugging", "studying", "Pressurizing"],
    "address" : {
        "city" : "Lahore",
        "idk" : true
    }
} 

//---Two methods of json----
//JSON stringify method
const jsonstring = JSON.stringify(person);
console.log(jsonstring);
//JSON parse method
const jsonparsed = JSON.parse(jsonstring);
console.log(jsonparsed);

17. //Dates and times in JS:

// Date

//Pass specific date 
// Date will be in:
//year, month, day, hours, minutes, seconds, miliseconds

// const currentdate = new Date(2024, 4, 24, 12, 30, 0, 0);  //use new keyword and use date constructor and then store in some variable
// console.log(currentdate);


// Write date Method:

const date = new Date();

const year = date.getFullYear();
const month = date.getMonth();
const day = date.getDay();
const hours = date.getHours();
const minutes = date.getMinutes();
const seconds = date.getSeconds();
const miliseconds = date.getMilliseconds();

console.log(`Year: ${year}`);
console.log(`Month: ${month}`);
console.log(`Day: ${day}`);
console.log(`Hours: ${hours}`);
console.log(`Minutes: ${minutes}`);
console.log(`Seconds: ${seconds}`);
console.log(`MiliSeconds: ${miliseconds}`);


------//NOW CONVERT DATE TO STRING::://--------

const date = new Date();

console.log(date.toDateString());
console.log(date.toISOString());
console.log(date.toLocaleDateString());

------//Previous or next date::://--------

const date = new Date();

//Use one at a time:

// date.setDate(date.getDate() - 1); //show previous date
// date.setDate(date.getDate() + 1); //show next date
console.log(date);

18. // Set Intervals in js:

Syantax:
SetInterval(function) //pass function in SetInterval
//or 
create function separate and pass their reference in setInterval()
//or
SetInterval(())       //pass arrow function 

Example:-

I will do it by arrow function:
setInterval(() => console.log(`This function will be executed after 2 seconds.`), 2000
)

Now i will do it by function:
setInterval(function (){
    console.log(`This function will be executed after 3 seconds`)
}, 3000);

19//.....SetTimeout..

Two ways:
1)---function
2)---arrow function

1)---function
setTimeout(function (){
    console.log(`This function will be executed after 3 seconds`)
}, 3000);

2)---arrow function
setTimeout( () => console.log(`This function will be executed after every 3 seconds`), 3000
);


NOTE::::

It will show interval after one second and stop after 10 seconds

//Show the interval after 1 second

const intervalid = setInterval(function (){
    console.log(`This function in being executed at the interval`)
    },1000)

// Stop the interval after 10 seconds

setTimeout(function(){
    clearInterval(intervalid);
    console.log(`Interval stopped`);}, 10000);

20. // Template strings/ template literals

Template strings , also known as template literals, are a feature in javascript that allows
you to create strings with embedded expressions. They are denoted by backticks `` instead of single or double quotes.
Template strings provode a more flexible and concise way to construct strings, especially when they involve variables or expressions...

Example:

const firstname = "HuXn";
const lastname = "WebDev";

console.log(`My name is: ${firstaname} ${lastname}`);

Example 02:


const firstname = "HuXn";
const lastname = "WebDev";

function info(){
    return `My name is noor.`;
}

console.log(`${info()}`);   //when i will call info() then it will give me output of func but when i will pass info without this(), then it will give me whole funciton in result instead of what the function is returning.. 

***But this was old way now we use like this:***

const firstname = "HuXn";
const lastname = "WebDev";

console.log("add something " + firstname + " " + lastname)

NOTE:

But for sometime we can use these literals but more times its dangerous...

21. // Arrow functions in js:

Arrow functions , also known as fat arrow functions, are a concise and shorter way to define functions in js.
They were introduced in ECMAScript 6 (ES6) and provide a more compact syntax compared to traditioma; function expression.

Example of arrow function and syantax:

greet = (username) => {
    return `Hello ${username}`;
}

console.log(greet("Noor"));

****Simple function:****

function greet(username){
    return `Hello ${username}`;
}


::::::::::::NOTE::::::::::::

Arrow function example:

greet = (username) => {
  `Hello ${username}`;
}
console.log(greet("Noor"));

But if I am passing one parameter then if i will not write in (), then it will not give any error, but i then i also need to remove {} and return as well.
like this:

const greet = username => `Hello ${username}`;
console.log(greet("Noor"));     //output = Hello Noor

But if i will have one or more parameters then i need to write in (), and {} and return as well.
like this:::

greet = (username, firstname, lastname) => {
   return `Hello ${username} ${firstname} ${lastname}`;
}

console.log(greet("Noor", "Hira", "Ali"));


22. //Enhanced object literals:

Enhanced object literals, introduced in ES6 , are a set of enhancements to the syntax for defining objects in js.
These enhancements make it mire convienient and concise to define object properties and methods.

.....***Function return objects(and in objects we can assign a function as value) called enhanced objects literals....***

Example 01:

function user(name, age, work) {
    return {
        name : name,
        age : age,
        work : work,
    };
}

const alex = user("noor", 24, "Programmer")
console.log(alex);


Also I can use this , then the result will be tha same:

function user(name, age, work) {
    return {
        name,
        age, 
        work, 
    };
}

const alex = user("noor", 24, "Programmer")
console.log(alex);

=======ALSO USE ANOTHER FUNCTION IN THAT FUNCITON WHICH RETURN OBJECTS:======

EXAMPLE:

LIKE THIS:::::

function user(name, age, work) {
    return {
        name,
        age, 
        work,
    // use simple function...

    //    intro: function () {
    //         console.log(`My name i s${name} & I'm ${age} years old & I'm a ${work}`);        
    //        } 

    //use arrow function as well...
    
       intro: () => {
        console.log(`My name i s${name} & I'm ${age} years old & I'm a ${work}`);        
       } 
    };
}

const alex = user("noor", 24, "Programmer")
console.log(alex);

23. // Default function parameters:

Introduced in ECMAScript 6 (ES6), allow you to assign deafult values to function parameters. when a function is called, And
an argument is not provided for a parameter , the default value will be used instead, This feature makes it easier to handle cases where arguments might be misssing or undefined..


Example:

function countto5(count = true) {   //provide here true
    if(count === true){
        for(let i =1; i <= 5; i++){
            console.log(`Count: ${i}`);
            
        }
    }
}

countto5(true);         //or provide here true then it wil show output

Example 02:

function ratings(rate = 0){   //provode value here
    if (rate === 5) {
        console.log(`High Rating :)`);
        
    }

    else if (rate === 0) {
        console.log(`Low Ratings :( `);
        
    }

}

ratings(0)    //or provode here then it will
              //show output that means there must 
              //be need to provode value atleast one place 
              //at start as a parameter or at end when
              //calling the function.


Example code:

function multiply (a, b = 2) {
    return a * b;
}
console.log(multiply(2, 3));    //output = 6
console.log(multiply(4));       // output = 8 

//because 4 which i provided
//it will be the value
//of a, the value of will be 1 which i had already set at top.

24. // Spread Operator in js:(for merging)

The spread operator is a new addition to the set of operators in javascript ES6.
It takes in an literable (e.g; an array) and expands it into individual elements.
The spread operator is commonly used to make shallow copies of js pbjects.
using this operator makes the code concise and enhances its readability..

//Spread operators in functions, array, objects...

=========Spread operator by using functions:=======

Example:

(i)=======Without using spread operator:

function giveMe4(a, b, c, d) {
    
    console.log("a", a);
    console.log("b", b);
    console.log("c", c);
    console.log("d", d);

}

//If I will have one parameter so i can easily acces like this:

const colors = ("noor")   //output a noor
giveMe4(colors);

// But If I will have more parameters then 
//it will just give me the output of one 
//and rest of the will be undefined...

const colors = ("noor", "hira", "ali", "zain")
giveMe4(colors);

(ii)=====By using spread operator:

function giveMe4(a, b, c, d) {
    
    console.log("a", a);
    console.log("b", b);
    console.log("c", c);
    console.log("d", d);

}

// but when i will pass it in array and will use spread operator then
// it will not give me any error
//and also print all values on the console.
//like this:

const colors = ["noor", "hira", "ali", "zain"]
giveMe4(...colors);

=========Spread Operator in Array======

Example 01:

const strNums = ["one", "two", "three"];
const morestrNums = ["four", "five", "six"];
const concat = [...strNums, ...morestrNums];
console.log(concat);

Example 02:

//One more benefit of spread operator is that If I want to
//add more parameters in array with spread operator 
//then I can also add.
//Like this:

let peoples = ["noor", "ali", "zain"];
const allPeps = ["kumar", ...peoples, "huxn"];
console.log(allPeps);

Example 03:

const a = ["ali", "hira", "noor"];
const b = ["yeh", "no", "way"];
const concat = [...a,...b, "noor"]

console.log(concat);

=======Spread Operators by using objects=====

Example :

const obj1 = {
    x : 1,
    y : 2,  
};

const obj2 = {
    z : 3
};

const obj3 = {
    ...obj1, ...obj2
};

console.log(obj3);

25. ============Rest Operators in Js:==========

//The rest parametr syntax allows a function to accept an indefinite number of arguments
//as an array , providing a way to represent variadic functions in js..


====Without using rest operator=====

Example:

function user(userdata) {
    console.log(userdata);
    
}

user("noor", 19, "programming", "hockey") //It will just print "noor" on console as it will go to userdata parameter..and others will not print on the concole.....

====With using rest operator=====

Example:

function user(...userdata) {
    console.log(userdata);
    
}

//I am accesing that variables 
//which i had not defined at top:
//but due to rest operator i can successfully get all of them..

user("noor", 19, "programming", "hockey") 

Example:

function user(x,...userdata) {
    console.log(x);
    console.log(userdata);
    
}

user("noor", 19, "programming", "hockey") //x = noor and rest will be in userdata parameter.


=========NOTE FOR MYSELF=========

I used spread at last during calling the function,,
AND 
I used rest at start during passing the parameters in function.


26. // Destructuring in javascript:(Its idea is thet create variables and assign it to the main variable)

Destructuring allows us to "unpack" values from data-structures (Arrays, Objects and functions) 
into separate distinct variables..

//Destructuring by Arrays, Objects and Functions:

==1== Arrays Destructuring in js:

//This is simple Example to print what present on each index of array:

const foo = ["one", "two", "three"]; 

console.log(foo[0]);
console.log(foo[1]);
console.log(foo[2]);

//Destructuring Example 01  1st way:


const foo = ["one", "two", "three"]; 

const a = foo[0];   //store the value in variable and then log to console,
                    //this is basically called destructuring..
console.log(a);

const b = foo[1];
console.log(b);

const c = foo[2];
console.log(c);

//Destructuring Example 02  2nd way:(Its we used)

const foo = ["one", "two", "three"]; 

//create a separate variables and then assign it:
const [on, tw, thr] = foo;

console.log(on);
console.log(tw);
console.log(thr);


//Destructuring Example 03  3rd way:


(i)---let a, b;

[a = 5, b = 10] = [1]  //output: a = 1
console.log(a);

(ii)---let a, b;

[a = 5, b = 10] = [1, 2]  //output: b = 2
console.log(b);

(iii)---let a, b;

[a = 5, b = 10] = [1]  //output: b = 10(beacuse we are specifying default value to array which is b = 10)
console.log(b);

==//Using and storing data by array method:==//

Example 04:

function f() {
    return [1, 2]
}

let a, b;
[a, b] = f();
console.log(a);
console.log(b);

Example 05:

function f() {
    return [1, 2, 4]
}

const [a, , b] = f();   //destructuring 1 to a and 4 to b;

console.log(a);     //outout = 1
console.log(b);     //output = 4(because of empty space it will 
                    //ignore the second space..
)

//Array desructuring and rest operator:

const num = ["one", "two", "three", "true,", 12, ["one"]];
const [a, ...rest] = num;
console.log(a);
console.log(rest)

******IMPORTANT NOTE FOR ARRAY:*********

Order matters but the name does not.

// (Destructuring Challenge)

// const colors  = ["red", "green", "blue", "yelllow", "orange"]; //Order matters... 

// const [color1, color2, color3 ] = colors;    //Name does not matters...

// console.log(color1);
// console.log(color2);
// console.log(color3);


(2)==Objects Destructuring in js==

******IMPORTANT NOTE FOR OBJECTS:*********

Order does not matter but the name does matter...

Example 01:

const student = {
    name : "Noor",
    age : 23,
    position : "First",
    rollno : 9,
}

const { name, position, rollno } = student;   //destructure the name, position etc..
console.log(name);
console.log(position);
console.log(rollno);

===Renaming in objects destructuring:=

Example :

const student = {
    x : 100,
    y : 200,
};

const {x : new1, y : new2} = student;

//It will give reference error that x and y not defined
// console.log(x);
// console.log(y);
//So after renaming I will use that which i renamed like this:
console.log(new1);
console.log(new2);

===object destructuring and rest operator in js:=

let num = { a : 100,
    b: 200,
    c: 300,
    d: 400,
    e : 500,

}
let { a, b, ...rest} = num;

console.log(a);
console.log(b);
console.log(rest);

(3)==Function Destructuring==


//1//++++++++++Simple function++++++++++

// function person(){
//     const a = "noor";    //initialize values
//     const b = "hira";

//     console.log(a);      //log values
//     console.log(b);
    
// }
// person();


//2//+++++++++Simple function+++++++++

// function printPersonInfo(name, age, country) //passing variables as parameter
// {
//     console.log(`Name: ${name}`);
//     console.log(`Age: ${age}`);
//     console.log(`Country: ${country}`);
// }
// printPersonInfo("noor", "23", "Pakistan");   //passing values as arguments


//3//+++++++++Simple function by creating separate object+++++++++

// const person = {
//     name : "Noor",
//     age : 30,
//     country : "Pakitan",

// };

// function printPersonInfo(person) {

//     console.log(`Name: ${person.name}`);
//     console.log(`Age: ${person.age}`);
//     console.log(`Country: ${person.country}`);
// }
// printPersonInfo(person);


//4//+++++++++Destructuring the function+++++++++
//If I don't want to console name , age
//country with person object then i can destruct it by passing variables 
//as parameters in function but must must must in {}, then it will destruct it gives the same output as well.

// const person = {
//     name : "Noor",
//     age : 30,
//     country : "Pakitan",

// };

// function printPersonInfo({name, age, country}) {

//     console.log(`Name: ${name}`);
//     console.log(`Age: ${age}`);
//     console.log(`Country: ${country}`);
// }
// printPersonInfo(person);

//5//+++++++++Rename the Destructuring the function+++++++++

let options = {

    title : "My menu",
    items : ["item1", "item2"],

}
function shoemenu(
    
    {title,
     width: w = 100, 
     height: h = 200, 
     items: [item1, item2]}) 
     
    {
    console.log(`${title} ${w} ${h}`);
    console.log(item1);
    console.log(item2);  
}

shoemenu(options);

==========Nested destructuring in js:=======

//I have array with nested object 

//One way:
const songs = [
    
        {name : "noor" , singer: "hira", duration : 4.34},
        {name : "ali" , singer: "faiza", duration : 2.34},
        {name : "zain" , singer: "sameen", duration : 1.34},
]

const [, , {singer}] = songs 
console.log(singer);     //sameen

//Two way:
const songs = [
    
        {name : "noor" , singer: "hira", duration : 4.34},
        {name : "ali" , singer: "faiza", duration : 2.34},
        {name : "zain" , singer: "sameen", duration : 1.34},
]

const [, , {singer: s}] = songs 
console.log(s);     //sameen 

//++++++++++++Mixed destructuring of objects:+++++++++


// const data = {

//     user : {
//         id : 9,
//         name : "noor",
//         age : 23,
//         email : "nf99noorfatima@gmail.com",
//         address : {
//             city : "muridke",
//             country : "pakistan"
//         },

//         hobbies : ["Reading", "Painting", "Cooking"],
    
//         scores : {
//         math : 95,
//         science : 88,
//         history : 75,},
//     },

//     products : [
//         {id: 1, name: "Laptop", price: 1000},
//         {id: 2, name: "Phone", price: 800},
//         {id: 3, name: "Tablet", price: 500}],

//     settings : {
//         darkmode: true,

//         notifications: {

//             email : true,
//             sms : false,
//             push : true,},

//         language : "English",},
// }

// const  {
//     user : {
//         id, name, age , address: {city, country}, email,
//         hobbies,
//         scores : {math, science, history},
//     },

//     products : [product1, product2, product3],

//     settings : {
//         darkmode, 
//         notifications : {
//             email: emailnotification,
//             sms : smsnotification,
//             push: pushnotification,
//         },

//         language,
//     },
// } = data;

// console.log(`Id: ${id}`);
// console.log(`Name: ${name}`);
// console.log(`Age: ${age}`);
// console.log(`Address: ${city}, ${country}`);
// console.log(`Hobbies: ${hobbies.join(", ")}`);
// console.log(`Math Score: ${math}`);
// console.log(`Science Score: ${science}`);
// console.log(`History Score: ${history}`);
// console.log(`Email: ${email}`);
// console.log(`Product 1: ${product1.name} - $${product1.price}`);
// console.log(`Product 1: ${product2.name} - $${product2.price}`);
// console.log(`Product 1: ${product3.name} - $${product3.price}`);
// console.log(`Dark Mode: ${darkmode}`);
// console.log(`Email Notification: ${emailnotification}`);
// console.log(`SMS Notification: ${smsnotification}`);
// console.log(`Push Notification: ${pushnotification}`);
// console.log(`Languagae: ${language}`);

26. ===========Ternary Operator in js========

The ternary operator in js is a concise way of writting conditional expressions.
It is the only js operator that takes three 
operands:

a condition followed by a question mark (?),
an expression to execute if the condition is true,followed by a colon (:),
and an expression to execute if the condition is false.

// condition ? exprIfTrue : exprIfFalse;

///I explain it by simple example;
Let say its simple function with condition of else if 

let password = 8;

function passwordchecker(ps)
 {
    if(ps === 8 ) {
        return `Strong password`;
        
    }
    else {
        return `Password should be 8 characters.`;
    }
}

===NOTEE===
I cannot use use if again after if else..

//Now I will change this into ternary:

Example 01:

let password = 8;

function passwordchecker(ps)

{
    // condition ? exprIfTrue : exprIfFalse;
    return ps === 8 ? `Strong password` : `Password should be 8 characters`
}

const res = passwordchecker(password);
console.log(res);

Example 02:


const age = 25 

// condition ? exprIfTrue : exprIfFalse;

const isadult = age >=  18 ? "Adult" : "Not an Adult";

console.log(isadult);

27. =====for in loop====

The "for...in" loop in js is used to iterate over the enumerable properties of an object. 
It is a way to loop through the keys (property names) of an object.

// for(let key in object) {........}


Example 01:

let person = {
    name: "noor",
    age: 19,
    gender: "female"
};

// for(let key in object) {........}


for (let key in person ) {
    console.log(key, person[key]);
    
}

Example 02:

let list = ["one", "two", "three", "four"];

for(let key in list) {
    console.log(`${key}: ${list[key]}`);
}

27. =====for of loop====

The "for..of" loop in js is a modern iteration statment introduced in ES6 that provides
a concise and easy way to loop over elements in iterable objects
like arrays, strings, maps, sets, and more.
It allows you to iterate directly over the values of elements,
rather than dealing with their indices or keys , which makes the code more readable 
and less error-prone.

// for (variable of iterable) {...}


=========For of loop in javascript:=========

// Exmple 01:

let peoples = ["huxn", "noor", "hira", "ali"];

for(let people of peoples) {
    console.log(people, peoples);
    
}

//output 

//  huxn (4) ['huxn', 'noor', 'hira', 'ali']
//  noor (4) ['huxn', 'noor', 'hira', 'ali']
//  hira (4) ['huxn', 'noor', 'hira', 'ali']
//  ali (4) ['huxn', 'noor', 'hira', 'ali']


// Example 02

let name = "Noor";

for (const num of name) {
    
    console.log(num);   //here i am printig the num whic is using as a key..
}

//output 

// N
// 2 o
// r

=========forEach loop in javascript:=========

//When we call the forEch helper we pass in anonymous callback function, 
//This function get called one time for every time in the array
//Whatever is inside the function that logic happens... 

Example 01:

const colors = ["noor", "fatima", "hira", "ali"];
colors.forEach((colors)  => 
    console.log(colors));
    
//output:
noor
fatima
hira
ali

Examle 02:

const words = ["hello", "bird", "table", "pipe", "code"];

const yeah = words.forEach((word, index, arr) => {
    arr[index] = word[0].toUpperCase() + word.substring(1)
})

console.log(words);

//output:

(5) ['Hello', 'Bird', 'Table', 'Pipe', 'Code']
0: "Hello"
1: "Bird"
2: "Table"
3: "Pipe"
4: "Code"
length: 5

=========Map helper in javascript:=========

The map() method creates a new array populated with the results of calling
a provided function on every element in the calling array..


Example 01:

let number = [1, 2, 3, 4, 5];              //each number inside this array 
let double = number.map((num => num * 2))   //passed to this calback function
                                            //and it will return new array which
                                            //will save in new variable which is double.

console.log(double);

//output
(5) [2, 4, 6, 8, 10]


//Map method cannot mdify the array if after implemnting the map fnction
//when I will console the number... 
//Like
console.log(number);   instead of this console.log(double);             

//output
(5) [1, 2, 3, 4, 5]     //return input


let number = [1, 2, 3, 4, 5];              
let double = number.map((num => num * 2)) 
console.log(double);

//output
(5) [1, 2, 3, 4, 5]    


Example 02:

let peoples = [
    {firstname : "Noor", lastname : "Fatima"},
    {firstname : "ali", lastname : "zain"},
    {firstname : "fazail", lastname : "amanat"},
]

const results = peoples.map((person) => {
    return [person.firstname, person.lastname]
})

console.log(results);

//output

(3) [Array(2), Array(2), Array(2)]

=========Filter helper in javascript:=========

The filter method is a built-in array method in javascript that allows you to create a new array containng elements 
that pass a certain condition . It provides  a clean and concise way to filter out elements from an array based on 
a specified criteria....

Example:

const songs = [
    { name : "ali", duration: 4.3},
    { name : "hira", duration: 3.5},
    { name : "faiza", duration: 2.5},
]

console.log(songs.filter((songs) => songs.duration > 2));

//output = 0: {name: 'ali', duration: 4.3}
//         1: {name: 'hira', duration: 3.5}
           2: {name: 'faiza', duration: 2.5}
           length: 3[[Prototype]]: Array(0)


Example 02:

//objcts are passing in array in filter exmple:

const computers = [
    {ram : 4, hadd: 100},
    {ram : 8, hadd: 200},
    {ram : 16, hadd: 300},
    {ram : 32, hadd: 400},
]

console.log(computers.filter((comp) => comp.ram > 16) );    

//output

// [{…}]   
// 0: 
// {ram: 32, hadd: 400}
// length: 1
// [[Prototype]]: Array(0)


=========Find helper in javascript:=========

The find() method is another built-in array helper in javascript that allows you to find the first element in array
that matches a specific condition. It returns the value of the first element that satisfies the given testing function, or undefined if no element is found.


Example 01:

const computers = [
    {ram : 4, hadd: 100},
    {ram : 8, hadd: 200},
    {ram : 16, hadd: 300},
    {ram : 32, hadd: 400},
]

const com = computers.find((person) => {
    return person.ram === 8} ) 
console.log(com);


=========every() and some() helper in javascript========
Both helpers give result in true or false form.

The every() and some() are two built-in array methods
in javascript that allow you to check the elements of an array 
based on a givem condition .

Both methods take a callback() function as an
argument , which is applied to each element of the array

//(1) ===every() Method:

The every() method tests whether all elements in 
the array pass the condition specified by the 
by the provided callback function. It returns true
if the callback function returns ture for every element
, and false if any element fails the condition..

//(2) The same() method tests whether at least one elementin the array 
passes the condition specified by the providedcallback function.
It returns true if the callback function returns true
for atleast one element and false if no element
pass the condition..


Example 01:

// const peoples = ["hexn" , "als", "noor", "hira"]

// const res = peoples.every((people) => people.length === 4);
// const res2 = peoples.some((people) => people.length < 4)
// console.log(res);
// console.log(res2);

//====NOTE===

//difference between every and some is that if one element is false
//then it gives false result
//and if one element is true then it gives true


=========reduce helper in javascript========


The reduce() method applies the reducer function 
to each element of an array , accumulating the results into a 
single value. It is often used to perform
calculations or aggregations an array elements and
simplify the array into a single value.

//How reduce() method works:

It takes two parameters:(previous amd current)

Example 01:

const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((p, c) => {
    console.log(`Previous: ${p}`);
    console.log(`Current: ${c}`);
    
    return p + c;
    // 0 + 1 => 1
    // 1 + 2 => 3
    // 3 + 3 => 6
    // 6 + 4 => 10
    // 10 + 5 => 15
}, 0)   //previous value is 0..

console.log(sum);

//Example 02:

const peoples = [

    {
        name : "noor",
        age : 19,
    },

    {
        name : "fatima",
        age : 29,
    },

    {
        name: "alex",
        age : 14,
    }

];

const oldestage = peoples.reduce((p,c) => (c.age > p ? c.age : p ),0);
console.log(oldestage);


====Map helper in js====(we can set value, get value, we can delete and update the existing value,)

Syntax:
const map1 = new Map();

Examplem01:

const map1 = new Map();
map1.set("a", 1);
map1.set("b", 2)
map1.set("c", 3)

console.log(map1.size);
map1.delete("b");
console.log(map1.size);


console.log(map1.get("a"));


=====Set in js========

// Set is a built-in data structure intriduced in (ES6)
that represents a collection of unique values.
Unlike arrays, set allows you to store only unique
values, which means duplicate values are automatically removed. Each value
can occur only once within a set.

// Set objects are useful when you need to store a list of unique
elements and quickly check for the existence of a specific value.

Syntax:

const myset = new Set()
console.log(myset);

Example 01:

const initValues = [1, 2, 2, 2, 2, 2, 3, 3] //uni
const mySet = new Set(initValues);

console.log(mySet);

Example 02:

const mySet = new Set();

mySet.add("apple");
mySet.add("apple");
mySet.add("banana");
mySet.add("orange");

console.log(mySet);
console.log(mySet.has("banana"));
mySet.delete("banana");
mySet.clear();
console.log(mySet);

for (let item of mySet) {
    console.log(item)
}

====Symbol in js=====

// Symbol is a unique and immutable(it means value cannot be changed) primitive data type
introduced in ES6. A symbol is often used as an identifier
for object properties to avoid potential naming conflicts.


//Unlike strings or numbers, symbols are guaranteed to be unique.
when you create a symbol, it is unique and cannot be redeclared or changed.
This uniqueness ensures that symbols will not collide
with other property names, even if they have the same string
representation.

Syntax:

const mySymbol = Symbol()

Example 01:

const mySymbol = Symbol()
console.log(mySymbol);
console.log(typeof mySymbol);

const mySymbol1 = Symbol("My symbol value")
console.log(mySymbol1);

// Comparing Symbols:

Example 02:

const mySymbol1 = Symbol("name");
const mySymbol2 = Symbol("name");

console.log(mySymbol1 === mySymbol2);

const obj = {};
obj[mySymbol1] = "Value 1";
obj[mySymbol2] = "Value 2";

console.log(obj);

Example 03:

const symbol1 = Symbol('name');
const symbol2 = Symbol('name');

const fahad = {}
fahad.age = 23;

fahad["gender"] = "female";
fahad["gender"] = "male"; //in output get this because symbol automatically update value will get...
fahad["symbol1"] = "hira";
fahad["symbol2"] = "ali";

console.log(fahad);

Example 04:

const symb = Symbol("foo");
console.log(symb);

console.log(typeof symb);

const obj = {
    firstaname : "ali"
    lastname : "zain
};

for(let i in obj){
    console.log(i)
}


========DOM in js=========

When a web page is loaded, the browser creates a Document
Object Model of the page...


